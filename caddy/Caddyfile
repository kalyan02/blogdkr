# ---------- reusable snippets ----------
(security_headers) {
	header {
		X-Frame-Options "SAMEORIGIN"
		X-Content-Type-Options "nosniff"
		X-XSS-Protection "1; mode=block"
		Server "Caddy/BlogSync"
	}
}

(app_routes) {
	# API first
	handle /health {
		reverse_proxy localhost:3000
	}
	handle /webhook {
		reverse_proxy localhost:3000
	}
	handle /auth/* {
		reverse_proxy localhost:3000
	}

	# Everything else
	handle {
		# 1) /var/www/sync when file exists (never serve .php)
		@sync_exists {
			file {
				root /var/www/sync
				try_files {path} {path}/index.html
			}
		}
		handle @sync_exists {
			root * /var/www/sync
			file_server {
				hide *.php
			}
		}

		root * /var/www/html

		# @in_test path /test/*
		# handle @in_test {
		#     # Match files that exist under /var/www/html/test/
		#     @exists file {
		#         try_files {path}
		#     }
		#     handle @exists {
		#         # Serve existing static files (hide .php)
		#         file_server {
		#             hide *.php
		#         }
		#         # If it's a real .php file, execute it
		#         php_fastcgi localhost:9000
		#     }
		#     # If file doesn't exist, rewrite to /test/index.php
		#     rewrite * /test/index.php
		#     php_fastcgi localhost:9000
		# }


		# Handles .php and directories with index.php
		php_fastcgi localhost:9000 {
			try_files {path} {path}/index.php =404
		}

		# Serve static files, hide .php from being served as plain files
		file_server {
			hide *.php
		}

		# 5) nothing matched
		# respond 404
	}
}

(logging) {
	log {
		output file /var/log/caddy/access.log {
			roll_size 10MB
			roll_keep 5
		}
		format json
	}
}

# ---------- end snippets ----------

# TLS sites
devnet.lonefish.net, devnet2.lonefish.net {
	tls letsencrypt@namburi.org

	import logging
	import security_headers
	import app_routes
}

# Plain HTTP
:80 {
	import logging
	import security_headers
	import app_routes
}
